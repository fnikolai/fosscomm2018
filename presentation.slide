#+theme=black
Hey Ho Let's GO
Golang Workshop, Fosscomm Oct/2018

Fotis Nikolaidis
- email:      nikolaidis.fotis@gmail.com
- git:        http://github.com/fnikolai
- linkedin:   https://www.linkedin.com/in/fotis-nikolaidis-444a6634


Credits:
[[manos.ikarios@gmail.com][Manos Ikarios]]
[[http://github.com/baijum/presentation/golang_workshop][Baiju Muthukadan]]


* Ground Rules

- Experience in some other programming language (Perl, Python, C, C++, Java,..)
- Workshops are hard, everyone works at a different pace
- We will move on when most of the people are ready
- Slides are online, feel free to work ahead or catch up
- Talk -> exercise -> Q&A -> talk -> exercise ...

.image image/gopher.png 250 _ 


* Agenda

- General facts and Reasons to use GO
- Data structures (primitives, arrays, maps, structs, ...)
- Control structures (functions, if, switch, ...)
- Exercise 1 (Rooky)
- Defered execution, panic/recover, interfaces, 
- Exercise 2 (Veteran)
- Concurrent programming
- Exercise 3 (Captain Chief)
- Lunch



* Moore's law is failing
The number of transistors on a chip doubles every year while the costs are halved

.image image/moores.png 400 _

- Processes used to run pseudo-parallely on a single core. Not any more 

* Amdahls' law is raising
Performance upper bound when a fixed workload is moved to a more parallel environment

.image image/amdahls.png 400 _

- Pseudo-parallel process used to communicate through shared memory. Not any more

* Facts

Step beyond monolithic applications 

    - Coordinate processes          holy grail since '60s
    - Minimal side effects:         components do not interfere accidently with another

Larges codebase

    - Reusable code:                if it exists, use it
    - Minimal boilerplate code:     avoid lines that would not exist in pseudocode

Thousands of developers

    - Simple language:              rapid productivity
    - Formal verification:          ensure that a component does what it claims to do    

Diverse backgrounds

    - Clean code:                   if something similar exists, modify it
    - Language ecosystem:           standardized set of tools


* What is GO ?
- General Purpose Programing Language created at Google by R. Griesemer, R. Pike and K. Thompson in 2009
- Type-safe, memory-safe, with garbage collection and Built-in concurrency (CSP-style)
- [[http://commandcenter.blogspot.in/2012/06/less-is-exponentially-more.html][Simplicity]], 25 keywords (less than C,C++,Python etc.)

.image image/go2.png _ 400



* Go in a Nutshell

- Statically typed
- Syntax similar to Java/C/C++, but less parentheses and no semicolons
- Compiles to native code (no JVM)
- No classes, but structs with methods
- Interfaces
- No implementation inheritance. There's type embedding, though.
- Functions are first class citizens
- Functions can return multiple values
- Has closures
- Pointers, but not pointer arithmetic
- Built-in concurrency primitives: Goroutines and Channels


* Who uses Go?

- Google
- Uber
- Dropbox
- BBC
- Docker
- Disqus
- SoundCloud
- UserVoice
- [[https://github.com/golang/go/wiki/GoUsers][https://github.com/golang/go/wiki/GoUsers]]
- [[https://github.com/golang/go/wiki/SuccessStories][https://github.com/golang/go/wiki/SuccessStories]]



* Hello, Workshopers !
Go programs are made up of *packages*: code organization, faster compilation 

- Executables are in package *main*

.play code/hello.go

- To play with Go programming online: [[http://play.golang.org]]
- The presentation tool is written in GO

* Keywords

Keywords are reserved words that cannot be used as identifiers

- Provide structure and meaning to the language


    break        default      func         interface    select
    case         defer        go           map          struct
    chan         else         goto         package      switch
    const        fallthrough  if           range        type
    continue     for          import       return       var

C Style Comments

    /* This is a multi-line comment
       ... and this is a the second line */

C++ style Comments

    // Single line number
    // Starts with two slashes


* Built-In Functions

- Close channel: *close*
- Length and capacity: *len*, *cap*
- Allocation: *new*
- Making slices, maps and channels: *make*
- Appending to and copying slices: *append*, *copy*
- Deletion of map elements: *delete*
- Manipulating complex numbers: *complex*, *real*, *imag*
- Handling panics: *panic*, *recover*

* Primitive types

int, uint, int8, uint8, ...
bool, string
float32, float64
complex64, complex128

.play code/primitive1.go /START OMIT/,/END OMIT/

- [[https://golang.org/pkg/fmt]]

* Variable Declaration


Type goes after identifier

    var foo int                 // declaration without initialization
    var foo int = 42            // declaration with initialization
    var foo, bar int = 42, 1302 // declare/init multiple vars at once
    var foo = 42                // type omitted, will be inferred
    foo := 42                   // shorthand, only in func bodies, implicit type
    const constant = "This is a constant

- Types can be converted from one to another
    
    i := 42             // Integer
    f := float64(i)     // Float64
    u := uint(f)        // Back to unsigned integer


- *camelCase* naming convention
- *UpperCase* identifier: exported (visible from other packages)
- *lowerCase* identifier: private (not visible from other packages)



* Function Declaration
    func functionName(param1 string, param2 int) {} // parameters of different type
    func functionName(param1, param2 int) {}        // parameters of same type
    func functionName(params  ...int) {}            // variadic parameters


Return values go after function declaration 

    func functionName() string                      // Return single value
    func functionName() (ret0 string)               // Return named value
    func functionName() (ret0 string, ret1 int)     // Return multiple named values

Can be used as values and as closures

.play code/functiondeclaration2.go /START OMIT/,/END OMIT/


* Why the strange syntax ?

C syntax

        int random_number;
        int *pointer_to_number;
        int array_of_random_numbers[3];

        int main(int argc, char *argv[]);
        int (*)(int a, int b);
        int (*)(int (*)(int, int), int);
        int (*(*)(int (*)(int, int), int))(int, int);


Go syntax 

        randomNumber int                        // not visible outside the package
        pointerToRandomNumber *int              // not visible outside the package
        ArrayOfRandomNumbers [3]int             // visible outside the package

        func main(int, []string) int
        func(int,int) int,
        func(func(int,int) int, int) int
        func(func(int,int) int, int) func(int, int) int


* Arrays

An ordered container type with a fixed number of data

- The type *[n]T* is an array of n values of type T
- Default value is nil

An array's length is part of its type, so arrays cannot be re-sized.

- if the length is different for two arrays, those are distinct incompatible types

    heights := [4]int{153, 146, 167, 170}
    colors := [3]string{"Red", "Green", "Blue"}
    i := colors[1]
    fmt.Println(i)


* Slices

A [[https://blog.golang.org/slices][slice]] *[]T* points to an _array_ of values of type T

- *len()* number of elements. *cap()* size of underlying array
- *append()* resizes the underlying array and appends a new element to the slice

.play code/slice.go /START OMIT/,/END OMIT/


- [[http://blog.golang.org/go-slices-usage-and-internals]]


* Maps

A [[https://blog.golang.org/go-maps-in-action][map]] maps keys to values

- Can be allocated at declaration time

    fruitWeights := map[string]int{
        "Apple":  45,
        "Mango":  24,
        "Orange": 34,
    }

- Or before usage with the *make* keyword

.play code/maps.go /START OMIT/,/END OMIT/

- Assignment to *nil* map is provibited

* For Loop

It can be only _for_. No _while_, no _until_

- Syntax inspired by C. Curly brace is mandatory.
- No parenthesis (not even optional)

    for i := 1; i < 10; i++ { }
    for ; i < 10; {}                // while
    for i < 10 {}                   // can drop semilicolons
    for {}                          // while(true) 

- Trivial to loop an array/slice. How would you loop a map ?
- Difficult for the compiler to prefetch data


* Range Iterator

Unified way to iterate constructs (e.g., slices, maps, channels, ...)

- loop over an array/a slice returns a tuple <index, element>
- loop over a map returns a tuple <key, element>
- Blank identifier  (*_* ) can be used to ignore returned values

    a := []{1,2,3,4,5,6,7}      // Declare a slice

    for i, e := range a { // i is the index, e the element   }
    for _, e := range a { // i is ommitted, e is the element }
    for i := range a    { // i is the index, e is ommitted   }

- loop on other constructs
    for range time.Tick(time.Second) {
        // do it once a sec
    }




* If Conditions

Syntax inspired by C. Curly brace is mandatory

.play code/if1.go /START OMIT/,/END OMIT/

- if statement can start with a short statement before the condition
- Variables declared by the statement are only visible within the scope of the statement

.play code/if2.go /START OMIT/,/END OMIT/


* Switch statement

- The cases are evaluated top to bottom until a match is found
- There is no automatic fall through. Use break for early termination
- Cases can be presented in comma-separated lists
- As with for and if, an assignment statement before the  switch value is allowed


.play code/switch1.go /START OMIT/,/END OMIT/

* Switch statement ...

If the switch has no expression it switches on true (useful to write an if-else-if-else chain)

.play code/switch2.go /START OMIT/,/END OMIT/




* Type declarations


*Constrains*: named type of built-in primitives

    type Celsius float64

*Semantics*: signify semantics to the structure

    type Dozen [12]string

*Structs*: Create a named collection of fields 

    type Person struct {
        Name string
        Age  int
    }

- type [name] [specification]

* Struct Declaration

    // Declaration without Initialization
    var me Person
    me.Name = "Douglas Powers"
    me.Actor = "Mike Myers"         

    // Declaration with Initialization
    minime := Person{ Name:  "Doublas Powers Jr.", Actor: "Mike Myers"	}

- Anonymous structs
- Inheritance versus type embedding (composition).

.play code/struct1.go /START OMIT/,/END OMIT/



* Method declaration

There are no classes, only structs. Struct is a type. Types can have methods.

- Method bound to a Person type (collection of fields):
    type Person struct {
        Name string
        Age  int
    }

    func (p Person) Major() bool { 
        return p.Age >= 18
    }

- Method bound to a Celcius type (single field):
    type Celsius float64

    func (c Celsius) Freezing() bool { 
        return c <= 0
    }


* Errors


There is no exception handling. Functions that might produce an error just declare an
additional return value of type [[https://blog.golang.org/errors-are-values][Error]]

- Calling code must handle the error or the compilation will fail
- Nil error denotes success
- Blank identifier  (*_* ) can be used to ignore returned values

.play code/error1.go /START OMIT/,/END OMIT/

    



* Challenge ~15 minutes
- Exercise 1: [[https://play.golang.org/p/wNTsf0-NE1b][https://play.golang.org/p/wNTsf0-NE1b]]
- [[https://play.golang.org/p/XXqIbGRvev2][Solution]]

.image image/gopher.png 400 _ 


* Pointers ...

Unlike C, Go has no pointer arithmetic, thus no pointers to unsafe memory.

    a := "hello"
    p := &a
    p += 4  // no, you can't

Passing values has no side effects, but requires (deep) copy (large) structs

    func double(x int) {
        x *= 2
    }

Passing references, side-effects posible (modifies the receiver)

    func double(x *int) {
        *x *= 2
    }
- Consistency: Let all methods have pointer receivers




* Defer statement

Postpones the execution of a function until the surrounding function returns. 

- Executed in LIFO order
- Ensure a cleanup function is called later

.play code/defer1.go /START OMIT/,/END OMIT/


* Panic / Recovery

A panic typically means something went unexpectedly wrong, or something that we are not prepared to handle gracefully

- Recover regains control of a panicking goroutine
- Equivalent to try-catch-finally

.play code/panic.go /START OMIT/,/END OMIT/


* Interface

An interface type is a collection of method signatures 

- A value of interface type can hold any value that implements those methods
- Interfaces are satisfied implicitly
- A type implements an interface by implementing the methods.
- A type can implement multiple interfaces

    type Geometry interface {
        Area() float64
        Perimeter() float64
    }

- Convert back to underlying type (if needed, reconsider your design)
    
    square := shape.(squareType)

* Interface ...

.play code/interface1.go /START OMIT/,/END OMIT/


* Challenge ~15 minutes
- Exercise 2: [[https://play.golang.org/p/3NGw1KSXZ0W][https://play.golang.org/p/3NGw1KSXZ0W]]
- [[https://play.golang.org/p/An_4PyBVa4W][Solution]]

.image image/gopher.png 400 _ 


* Concurrency is NOT parallelism 

Concurrency:  Programming as the composition of independently executing processes. 
        
        Concurrency is about dealing with lots of things at once. 

Parallelism:  Programming as the simultaneous execution of (possibly related) computations. 
        
        Parallelism is about doing lots of things at once.


- Concurrency is about structure, parallelism is about execution.
- Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable. 

- Go concurrency model and (like Erlang and others) is based on CSP
    
    C. A. R. Hoare: Communicating Sequential Processes (CACM 1978) 

* Communicating sequential processes

.image image/csp.png 350 _ 


- concurrent execution (goroutines)
- synchronization and messaging (channels)
- multi-way concurrent control (select)



* Goroutines

Lightweight threads managed by the Go runtime

- Calling a function with _go_ keyword starts the goroutine

.play code/concurrency1.go /START OMIT/,/END OMIT/


* Channels

Goroutines communicate to each other via channels (typed conduit)

- You can send and receive values of type _T_ with the channel operator: <-
- The data flows in the direction of the arrow.

    ch <- v    // Send v to channel ch.
    v := <-ch  // Receive from ch, and assign value to v.

Channels must be created before use (default value is nil)

    ch := make(chan int)

- Send and receive functions block until the other side is ready (bounded)
- Once a channel has been closed, you cannot send a value on this channel, but you can still receive from the channel.

* Synchronization via Channels


.play code/concurrency2.go /START OMIT/,/END OMIT/


* Synchronization via Mutexes

.play code/concurrency3.go /START OMIT/,/END OMIT/

* WaitGroup (WG)

_sync.WaitGroup_ provides a goroutine synchronization mechanism in Golang

- A WaitGroup waits for a collection of goroutines to finish
- _sync.WaitGroup_ provides 3 methods: Add, Done and Wait.
- _Add_ method is used to identify how many goroutines need to be waited
- When a goroutine exits, it must call _Done_
- The main goroutine blocks on _Wait_

* Synchronization via WG (single routine)

.play code/concurrency5.go /START OMIT/,/END OMIT/

* Synchronization via WG (multi routines)

.play code/concurrency4.go /START OMIT/,/END OMIT/

- Termination order not guaranteed
- And should *not* be




* Challenge ~N minutes
- Exercise 3: [[https://play.golang.org/p/LcbrgeTxI6S][https://play.golang.org/p/LcbrgeTxI6S]]
- [[https://play.golang.org/p/xbX8tEBBeWK][Solution]]

.image image/gopher.png 400 _ 



* Take away


Concurrency is not parallelism.

- Don't communicate by sharing memory, share memory by communicating.

- Channels orchestrate; mutexes serialize.

Clear is better than clever.

- The bigger the interface, the weaker the abstraction.

- A little copying is better than a little dependency.

Errors are values. Don't just check errors, handle them gracefully.

Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.

Design the architecture, name the components, document the details.

*Don't* *panic.*
